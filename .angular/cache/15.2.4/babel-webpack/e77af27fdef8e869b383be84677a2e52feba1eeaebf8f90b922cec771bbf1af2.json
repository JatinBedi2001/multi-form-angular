{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class FormService {\n  constructor() {\n    this.selectedCountrySource = new BehaviorSubject('');\n    this.selectedCountry$ = this.selectedCountrySource.asObservable();\n    this.selectedStateSource = new BehaviorSubject('');\n    this.selectedState$ = this.selectedStateSource.asObservable();\n  }\n  setSelectedCountry(country) {\n    if (country !== this.selectedCountrySource.value) {\n      this.selectedCountrySource.next(country);\n    }\n  }\n  setSelectedState(state) {\n    this.selectedStateSource.next(state);\n  }\n  getSelectedCountry() {\n    return this.selectedCountrySource.value;\n  }\n  getSelectedState() {\n    return this.selectedStateSource.value;\n  }\n  getCountries() {\n    return ['USA', 'Canada'];\n  }\n  getStatesForCountry(country) {\n    switch (country) {\n      case 'USA':\n        return ['California', 'New York'];\n      case 'Canada':\n        return ['Ontario', 'Alberta'];\n      default:\n        return [];\n    }\n  }\n  getCitiesForState(state) {\n    switch (state) {\n      case 'California':\n        return ['Los Angeles', 'San Francisco'];\n      case 'New York':\n        return ['New York City', 'Albany'];\n      case 'Ontario':\n        return ['Toronto', 'Ottawa'];\n      case 'Alberta':\n        return ['Calgary', 'Edmonton'];\n      default:\n        return [];\n    }\n  }\n}\nFormService.ɵfac = function FormService_Factory(t) {\n  return new (t || FormService)();\n};\nFormService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FormService,\n  factory: FormService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAGtC,OAAM,MAAOC,WAAW;EADxBC;IAEU,0BAAqB,GAAG,IAAIF,eAAe,CAAS,EAAE,CAAC;IAC/D,qBAAgB,GAAG,IAAI,CAACG,qBAAqB,CAACC,YAAY,EAAE;IAEpD,wBAAmB,GAAG,IAAIJ,eAAe,CAAS,EAAE,CAAC;IAC7D,mBAAc,GAAG,IAAI,CAACK,mBAAmB,CAACD,YAAY,EAAE;;EAExDE,kBAAkB,CAACC,OAAe;IAChC,IAAIA,OAAO,KAAK,IAAI,CAACJ,qBAAqB,CAACK,KAAK,EAAE;MAChD,IAAI,CAACL,qBAAqB,CAACM,IAAI,CAACF,OAAO,CAAC;;EAE5C;EAEAG,gBAAgB,CAACC,KAAa;IAC5B,IAAI,CAACN,mBAAmB,CAACI,IAAI,CAACE,KAAK,CAAC;EACtC;EAEAC,kBAAkB;IAChB,OAAO,IAAI,CAACT,qBAAqB,CAACK,KAAK;EACzC;EAEAK,gBAAgB;IACd,OAAO,IAAI,CAACR,mBAAmB,CAACG,KAAK;EACvC;EAEAM,YAAY;IACV,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC;EAC1B;EAEAC,mBAAmB,CAACR,OAAe;IACjC,QAAQA,OAAO;MACb,KAAK,KAAK;QACR,OAAO,CAAC,YAAY,EAAE,UAAU,CAAC;MACnC,KAAK,QAAQ;QACX,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC;MAC/B;QACE,OAAO,EAAE;IAAC;EAEhB;EAEAS,iBAAiB,CAACL,KAAa;IAC7B,QAAQA,KAAK;MACX,KAAK,YAAY;QACf,OAAO,CAAC,aAAa,EAAE,eAAe,CAAC;MACzC,KAAK,UAAU;QACb,OAAO,CAAC,eAAe,EAAE,QAAQ,CAAC;MACpC,KAAK,SAAS;QACZ,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC;MAC9B,KAAK,SAAS;QACZ,OAAO,CAAC,SAAS,EAAE,UAAU,CAAC;MAChC;QACE,OAAO,EAAE;IAAC;EAEhB;;AArDWV,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAgB,SAAXhB,WAAW;AAAA","names":["BehaviorSubject","FormService","constructor","selectedCountrySource","asObservable","selectedStateSource","setSelectedCountry","country","value","next","setSelectedState","state","getSelectedCountry","getSelectedState","getCountries","getStatesForCountry","getCitiesForState","factory"],"sourceRoot":"","sources":["/Users/jatinbedi/Desktop/multi-form-angular/src/app/services/form.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class FormService {\n  private selectedCountrySource = new BehaviorSubject<string>('');\n  selectedCountry$ = this.selectedCountrySource.asObservable();\n\n  private selectedStateSource = new BehaviorSubject<string>('');\n  selectedState$ = this.selectedStateSource.asObservable();\n\n  setSelectedCountry(country: string) {\n    if (country !== this.selectedCountrySource.value) {\n      this.selectedCountrySource.next(country);\n    }\n  }\n  \n  setSelectedState(state: string) {\n    this.selectedStateSource.next(state);\n  }\n\n  getSelectedCountry() {\n    return this.selectedCountrySource.value;\n  }\n  \n  getSelectedState() {\n    return this.selectedStateSource.value;\n  }\n  \n  getCountries(): string[] {\n    return ['USA', 'Canada'];\n  }\n\n  getStatesForCountry(country: string): string[] {\n    switch (country) {\n      case 'USA':\n        return ['California', 'New York'];\n      case 'Canada':\n        return ['Ontario', 'Alberta'];\n      default:\n        return [];\n    }\n  }\n  \n  getCitiesForState(state: string): string[] {\n    switch (state) {\n      case 'California':\n        return ['Los Angeles', 'San Francisco'];\n      case 'New York':\n        return ['New York City', 'Albany'];\n      case 'Ontario':\n        return ['Toronto', 'Ottawa'];\n      case 'Alberta':\n        return ['Calgary', 'Edmonton'];\n      default:\n        return [];\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}